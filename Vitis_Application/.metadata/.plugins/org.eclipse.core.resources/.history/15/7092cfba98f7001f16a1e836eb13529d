/* pid.c */
#include "pid.h"
#include "xil_printf.h"
//#include "xtime_l.h"  // For timing functions

void pid_init(PIDController *pid, float kp, float ki, float kd) {
    pid->Kp = kp;
    pid->Ki = ki;
    pid->Kd = kd;
    pid->integral = 0.0;
    pid->prev_error = 0.0;
    pid->prev_time = 0; // Initialize time tracking
}

#define INTEGRAL_LIMIT 100.0   // Limit the integral term
#define OUTPUT_MIN 0.0         // Minimum duty cycle (0%)
#define OUTPUT_MAX 255.0       // Maximum duty cycle (100%)

float pid_compute(PIDController *pid, float setpoint, float measured) {
    float error = setpoint - measured;

    // Get time difference (dt) for better derivative calculation
    XTime current_time;
    XTime_GetTime(&current_time);
    float dt = (pid->prev_time == 0) ? 0.01 : ((float)(current_time - pid->prev_time)) / (COUNTS_PER_SECOND);
    pid->prev_time = current_time;

    // Accumulate error for integral term with adaptive scaling
    pid->integral += error * dt;

    // Prevent integral windup
    if (pid->integral > INTEGRAL_LIMIT) pid->integral = INTEGRAL_LIMIT;
    if (pid->integral < -INTEGRAL_LIMIT) pid->integral = -INTEGRAL_LIMIT;

    // Derivative term using dt
    float derivative = (dt > 0) ? (error - pid->prev_error) / dt : 0.0;
    pid->prev_error = error;

    // Compute PID output
    float output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);

    // Ensure output stays within the valid range (0-255)
    if (output > OUTPUT_MAX) output = OUTPUT_MAX;
    if (output < OUTPUT_MIN) output = OUTPUT_MIN;

    xil_printf("PID: Error=%.2f, Integral=%.2f, Derivative=%.2f, Output=%.2f\n", error, pid->integral, derivative, output);
    return output;
}
