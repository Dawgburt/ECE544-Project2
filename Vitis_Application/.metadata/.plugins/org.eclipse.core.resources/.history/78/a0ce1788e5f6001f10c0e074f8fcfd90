/*
 * pid.c
 *
 *  Created on: Feb 24, 2025
 *      Author: pnevi
 */


#include "pid.h"


void pid_init(PIDController *pid, float kp, float ki, float kd) {
    pid->Kp = kp;
    pid->Ki = ki;
    pid->Kd = kd;
    pid->integral = 0.0;
    pid->prev_error = 0.0;
}



#define INTEGRAL_LIMIT 10.0  // Reduce integral effect to prevent rapid changes

float pid_compute(PIDController *pid, float setpoint, float measured) {
    float error = setpoint - measured;

    // Prevent integral windup
    pid->integral += error * 0.1; // Slow down integration effect
    if (pid->integral > INTEGRAL_LIMIT) pid->integral = INTEGRAL_LIMIT;
    if (pid->integral < -INTEGRAL_LIMIT) pid->integral = -INTEGRAL_LIMIT;

    float derivative = (error - pid->prev_error) * 0.1; // Scale down derivative effect
    pid->prev_error = error;

    // Compute the PID output
    float output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);

    // Convert the output to a duty cycle (0.0 - 1.0)
    if (output > 1.0) output = 1.0;
    if (output < 0.0) output = 0.0;

    return output; // Return duty cycle (0.0 to 1.0)
}



