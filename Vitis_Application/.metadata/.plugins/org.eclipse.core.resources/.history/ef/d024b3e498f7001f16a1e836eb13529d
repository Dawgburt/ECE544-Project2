/* pid.c */
#include "pid.h"
#include "xil_printf.h"
#include "xscutimer.h"  // Replace xtime_l.h with xscutimer.h

#define INTEGRAL_LIMIT 100.0   // Limit the integral term to prevent windup
#define OUTPUT_MIN 0.0         // Minimum duty cycle (0%)
#define OUTPUT_MAX 255.0       // Maximum duty cycle (100%)

// Timer instance for timing calculations
static XScuTimer TimerInstance;

void pid_init(PIDController *pid, float kp, float ki, float kd) {
    pid->Kp = kp;
    pid->Ki = ki;
    pid->Kd = kd;
    pid->integral = 0.0;
    pid->prev_error = 0.0;

    // Initialize the timer
    XScuTimer_Config *TimerConfig;
    TimerConfig = XScuTimer_LookupConfig(XPAR_SCUTIMER_DEVICE_ID);
    XScuTimer_CfgInitialize(&TimerInstance, TimerConfig, TimerConfig->BaseAddr);
    XScuTimer_LoadTimer(&TimerInstance, XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ); // Load with CPU clock cycles
    XScuTimer_Start(&TimerInstance);

    // Store initial time
    pid->prev_time = XScuTimer_GetCounterValue(&TimerInstance);
}

float pid_compute(PIDController *pid, float setpoint, float measured) {
    float error = setpoint - measured;

    // Get current time from the timer
    uint32_t current_time = XScuTimer_GetCounterValue(&TimerInstance);

    // Compute time difference (dt) in seconds
    float dt = (pid->prev_time - current_time) / (float)XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ;
    if (dt <= 0.0) dt = 0.01;  // Prevent division by zero or extremely small dt
    pid->prev_time = current_time;

    // Accumulate error for integral term with adaptive scaling
    pid->integral += error * dt;

    // Prevent integral windup
    if (pid->integral > INTEGRAL_LIMIT) pid->integral = INTEGRAL_LIMIT;
    if (pid->integral < -INTEGRAL_LIMIT) pid->integral = -INTEGRAL_LIMIT;

    // Derivative term using proper time interval (dt)
    float derivative = (error - pid->prev_error) / dt;
    pid->prev_error = error;

    // Compute PID output
    float output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);

    // Ensure output stays within the valid range (0-255)
    if (output > OUTPUT_MAX) output = OUTPUT_MAX;
    if (output < OUTPUT_MIN) output = OUTPUT_MIN;

    xil_printf("PID Debug: Error=%.2f, Integral=%.2f, Derivative=%.2f, Output=%.2f, dt=%.5f\n",
               error, pid->integral, derivative, output, dt);

    return output;
}
